'
'  Copyright (c) 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
'
'  This program and the accompanying materials are made available under the
'  terms of the Apache License, Version 2.0 which is available at
'  https://www.apache.org/licenses/LICENSE-2.0
'
'  SPDX-License-Identifier: Apache-2.0
'
'  Contributors:
'       Bayerische Motoren Werke Aktiengesellschaft (BMW AG) - Initial Draft
'
'

@startuml

state Consumer {
  state "INITIAL" as INITIAL_consumer {
  }
  state "STARTED" as STARTED_consumer {
  }
  state "COMPLETING" as COMPLETING_consumer {
  }
  state "COMPLETED" as COMPLETED_consumer {
  }
  state "provision" as provision_consumer {
      state "PROVISIONING" as PROVISIONING_consumer {
      }
      state "PROVISIONED_REQUESTED" as PROVISIONED_REQUESTED_consumer {
      }
      state "PROVISIONED" as PROVISIONED_consumer {
      }
      PROVISIONING_consumer --> PROVISIONED_REQUESTED_consumer : async provisioning
      PROVISIONED_REQUESTED_consumer --> PROVISIONED_consumer
      PROVISIONING_consumer --> PROVISIONED_consumer
  }
  state "TERMINATING" as TERMINATING_consumer {
  }
  state "TERMINATED" as TERMINATED_consumer {
  }

  [*] --> INITIAL_consumer
  INITIAL_consumer --> PROVISIONING_consumer
  PROVISIONED_consumer --> REQUESTING
  REQUESTING --> REQUESTED
  REQUESTING -[dashed]-> INITIAL_provider : sends\n**TransferRequestMessage**\nmessage

  REQUESTED -[hidden]-> STARTED_consumer : used for layout

  STARTED_consumer --> COMPLETING_consumer

  COMPLETING_consumer --> COMPLETED_consumer
  COMPLETING_consumer -[dashed]-> COMPLETED_provider : sends\n**TransferCompletionMessage**\nmessage
  COMPLETED_consumer --> DEPROVISIONING

  STARTED_consumer -[hidden]-> TERMINATING_consumer : used for layout
  TERMINATING_consumer --> TERMINATED_consumer
  TERMINATING_consumer -[dashed]-> TERMINATED_provider : sends\n**TransferTerminationMessage**\nmessage
  TERMINATED_consumer --> DEPROVISIONING
}

state Provider {
  state "INITIAL" as INITIAL_provider {
  }
  state "STARTING" as STARTING_provider {
  }
  state "STARTED" as STARTED_provider {
  }
  state "COMPLETING" as COMPLETING_provider {
  }
  state "COMPLETED" as COMPLETED_provider {
  }
  state "provision" as provision_provider {
      state "PROVISIONING" as PROVISIONING_provider {
      }
      state "PROVISIONED_REQUESTED" as PROVISIONED_REQUESTED_provider {
      }
      state "PROVISIONED" as PROVISIONED_provider {
      }
      PROVISIONING_provider --> PROVISIONED_REQUESTED_provider : async provisioning
      PROVISIONED_REQUESTED_provider --> PROVISIONED_provider
      PROVISIONING_provider --> PROVISIONED_provider
  }
  state "TERMINATING" as TERMINATING_provider {
  }
  state "TERMINATED" as TERMINATED_provider {
  }

  INITIAL_provider --> PROVISIONING_provider
  PROVISIONED_provider --> STARTING_provider
  STARTING_provider --> STARTED_provider
  STARTING_provider -[dashed]-> STARTED_consumer : sends\n**TransferStartMessage**\nmessage

  STARTED_provider --> COMPLETING_provider
  COMPLETING_provider --> COMPLETED_provider
  COMPLETING_provider -[dashed]-> COMPLETED_consumer : sends\n**TransferCompletionMessage**\nmessage
  COMPLETED_provider --> DEPROVISIONING

  STARTED_provider -[hidden]-> TERMINATING_provider : used for layout
  TERMINATING_provider --> TERMINATED_provider
  TERMINATING_provider -[dashed]-> TERMINATED_consumer : sends\n**TransferTerminationMessage**\nmessage
  TERMINATED_provider --> DEPROVISIONING
}

state deprovision {
    state DEPROVISIONING {
    }
    state DEPROVISIONED {
    }
    DEPROVISIONING --> DEPROVISIONED_REQUESTED : async provisioning
    DEPROVISIONED_REQUESTED --> DEPROVISIONED
    DEPROVISIONING --> DEPROVISIONED
}

@enduml
