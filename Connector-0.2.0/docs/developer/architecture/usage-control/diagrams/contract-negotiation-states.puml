'
'  Copyright (c) 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
'
'  This program and the accompanying materials are made available under the
'  terms of the Apache License, Version 2.0 which is available at
'  https://www.apache.org/licenses/LICENSE-2.0
'
'  SPDX-License-Identifier: Apache-2.0
'
'  Contributors:
'       Bayerische Motoren Werke Aktiengesellschaft (BMW AG) - Initial Draft
'
'

@startuml

state Consumer {
  state "INITIAL" as INITIAL_consumer {
  }
  state "REQUESTING" as REQUESTING_consumer {
  }
  state "REQUESTED" as REQUESTED_consumer {
  }
  state "OFFERED" as OFFERED_consumer {
  }
  state "ACCEPTING" as ACCEPTING_consumer {
  }
  state "ACCEPTED" as ACCEPTED_consumer {
  }
  state "AGREED" as AGREED_consumer {
  }
  state "VERIFYING" as VERIFYING_consumer {
  }
  state "VERIFIED" as VERIFIED_consumer {
  }
  state "FINALIZED" as FINALIZED_consumer {
  }
  state "TERMINATING" as TERMINATING_consumer {
  }
  state "TERMINATED" as TERMINATED_consumer {
  }

  [*] --> INITIAL_consumer
  INITIAL_consumer --> REQUESTING_consumer
  REQUESTING_consumer --> REQUESTED_consumer
  REQUESTING_consumer -[dashed]-> REQUESTED_provider : sends\n**ContractRequestMessage**

  REQUESTED_consumer -[hidden]-> OFFERED_consumer : used for layout

  OFFERED_consumer --> ACCEPTING_consumer
  OFFERED_consumer --> REQUESTING_consumer : counter offer
  ACCEPTING_consumer --> ACCEPTED_consumer
  ACCEPTING_consumer -[dashed]-> ACCEPTED_provider : sends\n**ContractNegotiationEventMessage**

  ACCEPTED_consumer -[hidden]-> VERIFYING_consumer : used for layout
  AGREED_consumer --> VERIFYING_consumer
  VERIFYING_consumer --> VERIFIED_consumer
  VERIFYING_consumer -[dashed]-> VERIFIED_provider : sends\n**ContractAgreementVerificationMessage**

  VERIFIED_consumer -[hidden]-> FINALIZED_consumer : used for layout

  VERIFIED_consumer -[hidden]-> TERMINATING_consumer : used for layout
  TERMINATING_consumer -[dashed]-> TERMINATED_provider : sends\n**TransferTerminationMessage**\nmessage
  TERMINATING_consumer --> TERMINATED_consumer
}

state Provider {
  state "INITIAL" as INITIAL_provider {
  }
  state "REQUESTED" as REQUESTED_provider {
  }
  state "OFFERING" as OFFERING_provider {
  }
  state "OFFERED" as OFFERED_provider {
  }
  state "AGREEING" as AGREEING_provider {
  }
  state "AGREED" as AGREED_provider {
  }
  state "ACCEPTED" as ACCEPTED_provider {
  }
  state "VERIFIED" as VERIFIED_provider {
  }
  state "FINALIZING" as FINALIZING_provider {
  }
  state "FINALIZED" as FINALIZED_provider {
  }
  state "TERMINATING" as TERMINATING_provider {
  }
  state "TERMINATED" as TERMINATED_provider {
  }

  [*] --> INITIAL_provider
  INITIAL_provider --> OFFERING_provider
  OFFERING_provider --> OFFERED_provider
  OFFERING_provider -[dashed]-> OFFERED_consumer : sends\n**ContractOfferMessage**
  REQUESTED_provider --> AGREEING_provider
  REQUESTED_provider --> OFFERING_provider : counter offer
  AGREEING_provider --> AGREED_provider
  AGREEING_provider -[dashed]-> AGREED_consumer : sends\n**ContractAgreementMessage**

  OFFERED_provider -[hidden]-> REQUESTED_provider : used for layout
  AGREED_provider -[hidden]-> VERIFIED_provider : used for layout
  REQUESTED_provider -[hidden]-> ACCEPTED_provider : used for layout

  ACCEPTED_provider --> AGREEING_provider
  VERIFIED_provider --> FINALIZING_provider
  FINALIZING_provider --> FINALIZED_provider
  FINALIZING_provider -[dashed]-> FINALIZED_consumer : sends\n**ContractNegotiationEventMessage**

  FINALIZING_provider -[hidden]-> TERMINATING_provider : used for layout
  TERMINATING_provider -[dashed]-> TERMINATED_consumer : sends\n**TransferTerminationMessage**\nmessage
  TERMINATING_provider --> TERMINATED_provider
}


@enduml
